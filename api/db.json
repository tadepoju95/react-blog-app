{
  "posts": [
    {
      "title": "notation",
      "description": "notation",
      "post": "Accessing Properties on an Object There are two ways to access properties on an object: Dot Notation Bracket Notation Dot notation is used most frequently. Below we’ll dive into each and discover some of the differences. Dot Notation Lets first look at Dot notation. Consider this example below: let obj = { cat: 'meow', dog: 'woof' }; let sound = obj.cat; console.log(sound); // meow I want to bring your attention to the fifth line where we’re using dot notation: let sound = obj.cat;. This is an example of dot notation. You can access properties on an object by specifying the name of the object, followed by a dot (period) followed by the property name. This is the syntax: objectName.propertyName;. When working with dot notation, property identifies can only be alphanumeric (and _ and $). Properties can’t start with a number. Dot notation is much easier to read than bracket notation and is therefor used more often. However, there’s a second way to access properties on an object you should be aware of. It’s called bracket notation. Bracket Notation Here’s an example of bracket notation:",
      "userName": "ko oluwa",
      "id": 4
    },
    {
      "title": "How to Properly Log State Change in React",
      "description": "I’m going to show you the two simple ways to console log state change in React for class based and functional components.",
      "post": "Greetings.\nI remember when I was working on a recent personal project of mine (Hop Centricity) and I was running into some frustrating issues while working with console logging. I was trying to debug a new feature I had made and wanted to see what the state was doing after certain events had occurred. I got really frustrated because I could see that some of the functionality was working correctly, but the console logs were telling me conflicting information.\nWhat was the root of the problem? Setting state, whether it be traditionally (class based) or via hooks, is asynchronous.\nI’m going to show you the two simple ways to console log state change in React for class based and functional components.\nLets start with functional. Here is an example of what not to do.\n",
      "userName": "able shalawa",
      "id": 5
    },
    {
      "title": "hi",
      "description": "hi",
      "post": "hi",
      "userName": "ko oluwa",
      "id": 6
    },
    {
      "title": "test",
      "description": "test",
      "post": "test",
      "userName": "ko oluwa",
      "id": 7
    },
    {
      "title": "ok",
      "description": "ok",
      "post": "ok",
      "userName": "ko oluwa",
      "id": 8
    }
  ],
  "comments": [
    {
      "time": "9/5/2021, 6:37:36 PM",
      "comment": "hello",
      "url": "/post/4",
      "userName": "ko oluwa",
      "id": 9
    },
    {
      "time": "9/5/2021, 6:43:08 PM",
      "comment": "great article!!",
      "url": "/post/4",
      "userName": "able shalawa",
      "id": 10
    },
    {
      "time": "9/5/2021, 6:49:47 PM",
      "comment": "yay!! makes so much sense.",
      "url": "/post/5",
      "userName": "ko oluwa",
      "id": 11
    }
  ]
}